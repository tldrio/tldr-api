This is "libusdt", an extraction into a C library of the common parts
of ruby-dtrace[1], perl-dtrace[2] and node-dtrace-provider[3].

Once this library is functional, those libraries will become bindings
to this library, rather than containing their own implementations of
DOF and probe creation. Other dynamic language bindings should follow.

The idea here is to allow the specification of a DTrace provider
dynamically in code and then create the provider at runtime. This
allows providers to be specified in dynamic languages, given suitable
bindings.

The general approach is to create two stub functions for each probe,
one for the is-enabled check and one for the probe itself. These
contain the appropriate instruction sequences to appear to DTrace as
compiled-in tracepoints. A minimal DOF document is built describing
the provider and indicating these stub functions as the tracepoints,
then submitted to the kernel, creating the provider. The API then
exposes the stubs, through which the probes may be fired.

Status:

The implementation here works as shown in test_usdt.c on Mac OS X, 64
bit only (despite the #ifdefs for Solaris in places).

Is-enabled probes are supported and exposed in the API.

To do:

 * break out platform-specific parts
 * add support for Solaris i386 and x86_64
 * add support for Mac OS X PowerPC
 * add support for Solaris SPARC


[1] https://github.com/chrisa/ruby-dtrace
[2] https://github.com/chrisa/perl-dtrace
[3] https://github.com/chrisa/node-dtrace-provider

